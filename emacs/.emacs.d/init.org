# -*- after-save-hook: (jethro/org-after-save-init); -*-
#+TITLE: Jethro's Emacs.d Configuration
#+HTML_HEAD: <style>pre.src {background-color: #303030; color: #e5e5e5;}</style>

* Basic Setup
** Add MELPA and Org Repository
Add package archives. Note that I'm using HTTP, HTTPS did not work for me.

#+BEGIN_SRC emacs-lisp :tangle yes
(when (>= emacs-major-version 24)
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (package-initialize))
#+END_SRC

** Add [[https://github.com/jwiegley/use-package/issues/70][use-package]]
#+BEGIN_SRC emacs-lisp :tangle yes
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-and-compile
  (defvar use-package-verbose t) 
  (require 'cl)
  (require 'use-package)
  (require 'bind-key)
  (require 'diminish)
  (setq use-package-always-ensure t))
#+END_SRC

** User configuration
#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Jethro Kuan"
      user-mail-address "jethrokuan95@gmail.com")
#+end_src

** Sensible Defaults
*** Custom File
#+BEGIN_SRC emacs-lisp :tangle yes
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
#+END_SRC

*** Custom font
#+BEGIN_SRC emacs-lisp :tangle yes
(add-to-list 'default-frame-alist
             '(font . "Fira Code-12"))
#+END_SRC

*** UI Cruft
#+begin_src emacs-lisp :tangle yes
(tooltip-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)
#+end_src

*** Use y/n over yes/no
#+BEGIN_SRC emacs-lisp :tangle yes
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Replace region when typing
#+BEGIN_SRC emacs-lisp :tangle yes
(delete-selection-mode +1)
#+end_src

*** Sentences
Emacs uses double-spaces by default. Use single spaces by default:

#+BEGIN_QUOTE
NOTE: This will cause an indistinction between sentences and name abbrieviations (eg. E. B. White)
#+END_QUOTE

#+begin_src emacs-lisp :tangle yes
(setq sentence-end-double-space nil)
#+end_src

*** Tab with 2 spaces
#+begin_src emacs-lisp :tangle yes
(setq-default tab-width 2)
(setq-default js-indent-level 2)
(setq-default indent-tabs-mode nil)
#+end_src

*** Don't wrap lines
Don't wrap lines for coding. Create a hook that enables wrapping, for modes like org-mode and markdown-mode.

#+begin_src emacs-lisp :tangle yes
(setq-default truncate-lines t)
(defun trunc-lines-hook ()
  (setq truncate-lines nil))
#+end_src

*** Backup directory
#+begin_src emacs-lisp :tangle yes
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+end_src

The following code will delete all backup files that are older than a certain date:

#+begin_src emacs-lisp :tangle yes
(message "Deleting old backup files...")
(let ((week (* 60 60 24 7))
      (current (float-time (current-time))))
  (dolist (file (directory-files temporary-file-directory t))
    (when (and (backup-file-name-p file)
               (> (- current (float-time (fifth (file-attributes file))))
                  week))
      (message "%s" file)
      (delete-file file))))
#+end_src
** Load secrets
#+begin_src emacs-lisp :tangle yes
(load "~/.emacs.d/secrets.el" t)
#+end_src

** Add PATH to eshell
#+begin_src emacs-lisp :tangle yes
(use-package exec-path-from-shell
  :demand t
  :init (exec-path-from-shell-initialize))
#+end_src

** Bookmarks
I use bookmarks to jump around to my files. I bind bookmark-jump to =S-o= to make it more accessible.

EDIT: trying to get used to =C-x r b.=

** Theme
*** Zenburn
A low-contrast theme that's easy on the eyes.
#+begin_src emacs-lisp :tangle yes
  (use-package zenburn-theme
    :init
    (load-theme 'zenburn t))
#+end_src
*** Tao (Disabled)
#+begin_src emacs-lisp :tangle no
  (use-package tao-theme
    :init
    (load-theme 'tao-yang t))
#+end_src

** Keybindings
*** Opening Lines
#+begin_src emacs-lisp :tangle yes
  (defun open-next-line (arg)
    "Move to the next line and then opens a line.
     See also `newline-and-indent'."
    (interactive "p")
    (end-of-line)
    (open-line arg)
    (next-line 1)
    (when 'newline-and-indent
      (indent-according-to-mode)))

  (defun open-previous-line (arg)
    "Open a new line before the current one. 
       See also `newline-and-indent'."
    (interactive "p")
    (beginning-of-line)
    (open-line arg)
    (when 'newline-and-indent
      (indent-according-to-mode)))

  (bind-key* "C-o" 'open-next-line)
  (bind-key* "M-o" 'open-previous-line)
#+end_src
*** Nuke all buffers with =C-c !=
#+begin_src emacs-lisp :tangle yes
  (defun jethro/nuke-all-buffers ()
    (interactive)
    (mapcar 'kill-buffer (buffer-list))
    (delete-other-windows))

  (bind-key* "C-c !" 'jethro/nuke-all-buffers)
#+end_src
*** eshell with =C-x m=
#+begin_src emacs-lisp :tangle yes
  (bind-key* "C-x m" 'eshell)
#+end_src
*** mark-paragraph with =M-p=
#+begin_src emacs-lisp :tangle yes
  (bind-key* "M-p" 'mark-paragraph)
#+end_src
*** compile with =<f5>=
#+begin_src emacs-lisp :tangle yes
  (bind-key* "<f5>" (lambda ()
                      (interactive)
                      (setq-local compilation-read-command nil)
                      (call-interactively 'compile)))
#+end_src

** Startup screen
#+begin_src emacs-lisp :tangle yes
  (use-package startscreen
    :ensure f
    :load-path "./elisp/"
    :config
    (jethro/setup-startup-hook))
#+end_src
** Hydra
#+begin_src emacs-lisp :tangle yes
  (use-package hydra)
#+end_src
* Ivy
I've recently switched over from =helm= to =ivy=. This is because the API for ivy is simpler, and thus makes it easier to extend.

** Counsel
Counsel contains ivy enhancements for commonly-used functions.
#+begin_src emacs-lisp :tangle yes
  (use-package counsel
    :demand t
    :bind*
    (("C-c C-r" . ivy-resume)
     ("M-a" . counsel-M-x)
     ("C-M-i" . counsel-imenu)
     ("C-x C-f" . counsel-find-file)
     ("C-c d" . counsel-dired-jump)
     ("C-c r" . ivy-recentf)
     ("C-c j" . counsel-git-grep)
     ("C-c k" . counsel-ag)
     ("C-c l" . counsel-locate)
     ("M-y" . counsel-yank-pop))
    :bind (:map help-map
                ("f" . counsel-describe-function)
                ("v" . counsel-describe-variable)
                ("l" . counsel-info-lookup-symbol))
    :config
    (ivy-mode 1)
    (setq counsel-find-file-at-point t)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-re-builders-alist
          '((t . ivy--regex-plus)))
    (setq ivy-initial-inputs-alist nil)
    (ivy-set-actions
     'counsel-find-file
     '(("d" (lambda (x) (delete-file (expand-file-name x)))
        "delete"
        )))
    (ivy-set-actions
     'ivy-switch-buffer
     '(("k"
        (lambda (x)
          (kill-buffer x)
          (ivy--reset-state ivy-last))
        "kill")
       ("j"
        ivy--switch-buffer-other-window-action
        "other window"))))
#+end_src

** Swiper
Swiper is ivy-enhanced isearch.
#+begin_src emacs-lisp :tangle yes
  (use-package swiper
    :bind*
    (("C-s" . swiper)
     ("C-r" . swiper)
     ("C-M-s" . swiper-all))
    :bind
    (:map read-expression-map
          ("C-r" . counsel-expression-history)))
#+end_src
* Moving Around
** avy
Use avy to move between visible text.
#+begin_src emacs-lisp :tangle yes
(use-package avy
  :bind* (("C-'" . avy-goto-char)
          ("C-," . avy-goto-char-2)))
#+end_src
** dumb-jump
Use it to jump to function definitions. Requires no external depedencies.
#+begin_src emacs-lisp :tangle yes
(use-package dumb-jump
  :diminish dumb-jump-mode
  :bind (("C-M-g" . dumb-jump-go)
         ("C-M-p" . dumb-jump-back)
         ("C-M-q" . dumb-jump-quick-look)))
#+end_src
** ace-window
Ace-window makes it easier to move between windows.
#+begin_src emacs-lisp :tangle yes
(use-package ace-window
  :bind (("M-'" . ace-window)))
#+end_src
** dired
*** Hide details
Hide details and only show file and folder names.
#+begin_src emacs-lisp :tangle yes
  (defun jethro/dired-mode-setup-hook ()
    "hook for dired-mode"
    (dired-hide-details-mode 1))

  (add-hook 'dired-mode-hook 'jethro/dired-mode-setup-hook)
#+end_src
*** Recursive Copying and Deleting
#+begin_src emacs-lisp :tangle yes
  (setq dired-recursive-copies (quote always))
  (setq dired-recursive-deletes (quote top))
#+end_src
*** dired-jump from file
#+begin_src emacs-lisp :tangle yes
  (require 'dired-x)
#+end_src
** save-place-mode
Save the cursor location for files I've visited.
#+begin_src emacs-lisp :tangle yes
(save-place-mode t)
#+end_src
* Editing Text
** electric-align
Use multiple spaces to align code and text.
#+begin_src emacs-lisp :tangle yes
(use-package electric-align
  :ensure f
  :load-path "elisp/"
  :diminish electric-align-mode
  :config (add-hook 'prog-mode-hook 'electric-align-mode))
#+end_src
** aggressive-indent
Keep your text indented at all times. Remember to turn this off for indentation-dependent languages like Python and Haml.
#+begin_src emacs-lisp :tangle yes
(use-package aggressive-indent
  :diminish aggressive-indent-mode
  :config (add-hook 'prog-mode-hook 'aggressive-indent-mode))
#+end_src
** multiple-cursors
A port of Sublime Text's multiple-cursors functionality.
#+begin_src emacs-lisp :tangle yes
(use-package multiple-cursors
  :bind (("C-M-c" . mc/edit-lines)
         ("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         ("C-c C-<" . mc/mark-all-like-this)))
#+end_src
** expand-region
Use this often, and in combination with multiple-cursors.
#+begin_src emacs-lisp :tangle yes
(use-package expand-region
  :bind (("C-=" . er/expand-region)))
#+end_src
** paredit
For editing Lisp code.
#+begin_src emacs-lisp :tangle yes
(use-package paredit
  :diminish paredit-mode
  :config
  (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
  (add-hook 'clojure-mode-hook 'paredit-mode))
#+end_src
** origami
#+begin_src emacs-lisp :tangle yes
  (use-package origami
    :config
    (global-origami-mode)
    (global-set-key
     (kbd "C-c o")
     (defhydra hydra-folding (:color red)
       ("o" origami-open-node "open node")
       ("c" origami-close-node "close node")
       ("n" origami-next-fold "next fold")
       ("p" origami-previous-fold "previous fold")
       ("f" origami-forward-toggle-node "fold forward")
       ("a" origami-toggle-all-nodes "fold all"))))
#+end_src
** zzz-to-char
Uses the avy-backend with z-to-char.
#+begin_src emacs-lisp :tangle yes
(use-package zzz-to-char
  :bind (("M-z" . zzz-up-to-char)))
#+end_src
** move-text
#+begin_src emacs-lisp :tangle yes
  (use-package move-text
    :bind* (("M-<up>" . move-text-up)
            ("M-<down>" . move-text-down)))
#+end_src
** Linting with Flycheck
#+begin_src emacs-lisp :tangle yes
  (use-package flycheck
    :config
    (global-set-key (kbd "C-c f")
                    (defhydra hydra-flycheck
                      (:pre (progn (setq hydra-lv t) (flycheck-list-errors))
                            :post (progn (setq hydra-lv nil) (quit-windows-on "*Flycheck errors*"))
                            :hint nil)
                      "Errors"
                      ("f"  flycheck-error-list-set-filter                            "Filter")
                      ("n"  flycheck-next-error                                       "Next")
                      ("p"  flycheck-previous-error                                   "Previous")
                      ("<" flycheck-first-error                                      "First")
                      (">"  (progn (goto-char (point-max)) (flycheck-previous-error)) "Last")
                      ("q"  nil)))
    (use-package flycheck-pos-tip
      :config (flycheck-pos-tip-mode))
    (add-hook 'prog-mode-hook 'global-flycheck-mode))
#+end_src
** Templating with Yasnippet
#+begin_src emacs-lisp :tangle yes
  (use-package yasnippet
    :diminish yas-global-mode yas-minor-mode
    :init (add-hook 'after-init-hook 'yas-global-mode)
    :config (setq yas-snippet-dirs '("~/.emacs.d/snippets/")))
#+end_src
** Autocompletions with Company
#+begin_src emacs-lisp :tangle yes
(use-package company
  :diminish company-mode
  :init (progn
          (add-hook 'after-init-hook 'global-company-mode)
          (setq company-dabbrev-ignore-case nil
                company-dabbrev-code-ignore-case nil
                company-dabbrev-downcase nil
                company-idle-delay 0
                company-begin-commands '(self-insert-command)
                company-transformers '(company-sort-by-occurrence))
          (use-package company-quickhelp
            :config (company-quickhelp-mode 1))))
#+end_src
** Spellcheck with Flyspell
#+begin_src emacs-lisp :tangle yes
  (use-package flyspell
    :ensure f
    :diminish flyspell-mode
    :config
    (add-hook 'text-mode-hook 'flyspell-mode)
    (add-hook 'org-mode-hook 'flyspell-mode)
    (add-hook 'markdown-mode-hook 'flyspell-mode))
#+end_src
* Language Support
** Go
#+begin_src emacs-lisp :tangle yes
(use-package go-mode
  :mode ("\\.go\\'" . go-mode)
  :config (progn
            (add-hook 'go-mode-hook 'compilation-auto-quit-window)
            (add-hook 'go-mode-hook (lambda ()
                                      (set (make-local-variable 'company-backends) '(company-go))
                                      (company-mode)))
            (add-hook 'go-mode-hook (lambda ()
                                      (add-hook 'before-save-hook 'gofmt-before-save)
                                      (local-set-key (kbd "M-.") 'godef-jump)))
            (add-hook 'go-mode-hook
                      (lambda ()
                        (unless (file-exists-p "Makefile")
                          (set (make-local-variable 'compile-command)
                               (let ((file (file-name-nondirectory buffer-file-name)))
                                 (format "go build %s"
                                         file))))))
            (use-package go-dlv
              :config (require 'go-dlv))
            (use-package golint
              :config
              (add-to-list 'load-path (concat (getenv "GOPATH")  "/src/github.com/golang/lint/misc/emacs"))
              (require 'golint))
            (use-package gorepl-mode
              :config (add-hook 'go-mode-hook #'gorepl-mode))
            (use-package company-go
              :config (add-hook 'go-mode-hook (lambda ()
                                                (set (make-local-variable 'company-backends) '(company-go))
                                                (company-mode))))))
#+end_src
** C++
*** C++ compile function
#+begin_src emacs-lisp :tangle yes
(add-hook 'c++-mode-hook
          (lambda ()
            (unless (file-exists-p "Makefile")
              (set (make-local-variable 'compile-command)
                   (let ((file (file-name-nondirectory buffer-file-name)))
                     (format "g++ -Wall -s -pedantic-errors %s -o %s --std=c++14"
                             file
                             (file-name-sans-extension file)))))))
#+end_src
** Fish
#+begin_src emacs-lisp :tangle yes
(use-package fish-mode
  :mode ("\\.fish\\'" . fish-mode))
#+end_src
** Rust
#+begin_src emacs-lisp :tangle yes
(use-package rust-mode
  :mode ("\\.rs\\'" . rust-mode))
#+end_src
** Python
#+begin_src emacs-lisp :tangle yes
  (use-package elpy
    :mode ("\\.py\\'" . elpy-mode)
    :init
    (add-hook 'python-mode-hook (lambda () (aggressive-indent-mode -1)))
    :config
    (when (require 'flycheck nil t)
      (remove-hook 'elpy-modules 'elpy-module-flymake)
      (remove-hook 'elpy-modules 'elpy-module-yasnippet)
      (remove-hook 'elpy-mode-hook 'elpy-module-highlight-indentation)
      (add-hook 'elpy-mode-hook 'flycheck-mode))
    (elpy-enable)
    (setq elpy-rpc-backend "jedi"))
#+end_src
** HTML
*** Web-mode
 #+begin_src emacs-lisp :tangle yes
 (use-package web-mode
   :mode (("\\.html\\'" . web-mode)
          ("\\.html\\.erb\\'" . web-mode)
          ("\\.mustache\\'" . web-mode)
          ("\\.jinja\\'" . web-mode)
          ("\\.php\\'" . web-mode))
   :config  
   (setq web-mode-enable-css-colorization t)
   (setq web-mode-code-indent-offset 2)
   (setq web-mode-markup-indent-offset 2))
 #+end_src
*** Emmet-mode
 #+begin_src emacs-lisp :tangle yes
(use-package emmet-mode
  :diminish emmet-mode
  :config
  (add-hook 'web-mode-hook 'emmet-mode)
  (add-hook 'vue-mode-hook 'emmet-mode))
 #+end_src
** CSS
*** Rainbow-mode
 #+begin_src emacs-lisp :tangle yes
   (use-package rainbow-mode
     :diminish rainbow-mode
     :config
     (add-hook 'css-mode-hook 'rainbow-mode)
     (add-hook 'scss-mode-hook 'rainbow-mode))
 #+end_src
*** SCSS-mode
 #+begin_src emacs-lisp :tangle yes
 (use-package scss-mode
   :mode "\\.scss\\'" 
   :config (progn
             (setq scss-compile-at-save nil)))
 #+end_src
** JS
*** Flycheck with jslint/eslint
Turn on flycheck for JS2-mode. Pick the appropriate lint file.
#+begin_src emacs-lisp :tangle yes
  (defun jethro/locate-dominating-file (regexp)
    "Locate a directory with a file matching REGEXP."
    (locate-dominating-file
     default-directory
     (lambda (directory)
       (> (length (directory-files directory nil regexp t)) 0))))
  (defconst jethro/jshint-regexp
    (concat "\\`" (regexp-quote ".jshintrc") "\\'"))
  (defconst jethro/eslint-regexp
    (concat "\\`" (regexp-quote ".eslintrc") "\\(\\.\\(js\\|ya?ml\\|json\\)\\)?\\'"))

  (defun jethro/js2-mode-hook ()
    (cond
     ((jethro/locate-dominating-file jethro/jshint-regexp)
      (flycheck-select-checker 'javascript-jshint))
     ((jethro/locate-dominating-file jethro/eslint-regexp)
      (flycheck-select-checker 'javascript-eslint))))
#+end_src
*** Jade
#+begin_src emacs-lisp :tangle yes
  (when (>= emacs-major-version 25)
    (use-package jade))
#+end_src
*** JS2-mode

Here I also added =tern-mode=. This requires the tern executable:
#+begin_src bash :tangle no
npm install -g tern
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package js2-mode
  :mode ("\\.js\\'" . js2-mode)
  :config
  (add-hook 'js2-mode-hook #'jethro/js2-mode-hook)
  (use-package tern
    :diminish tern-mode
    :config    
    (add-hook 'js2-mode-hook 'tern-mode)
    (use-package company-tern
                  :config
                  (add-to-list 'company-backends 'company-tern))))
#+end_src
*** Vue-mode
Additional support for Vue.js projects.

 #+begin_src emacs-lisp :tangle yes
 (use-package vue-mode
   :mode "\\.vue\\'")
 #+end_src
** JSON
 #+begin_src emacs-lisp :tangle yes
 (use-package json-mode
   :mode "\\.json\\'"
   :config (add-hook 'json-mode-hook (lambda ()
                                       (make-local-variable 'js-indent-level)
                                       (setq js-indent-level 2))))
 #+end_src
** Clojure
*** Clojure-mode
#+begin_src emacs-lisp :tangle yes
  (use-package clojure-mode
    :mode (("\\.clj\\'" . clojure-mode)
           ("\\.boot\\'" . clojure-mode)
           ("\\.edn\\'" . clojure-mode)
           ("\\.cljs\\'" . clojurescript-mode)
           ("\\.cljs\\.hl\\'" . clojurescript-mode))
    :init
    (add-hook 'clojure-mode-hook #'eldoc-mode)
    (add-hook 'clojure-mode-hook #'subword-mode)
    (add-hook 'clojure-mode-hook #'cider-mode)
    (add-hook 'clojure-mode-hook #'clj-refactor-mode))
#+end_src
*** Cider
#+begin_src emacs-lisp :tangle yes
  (use-package cider
    :init
    (add-hook 'cider-mode-hook #'clj-refactor-mode)
    (add-hook 'cider-repl-mode-hook #'company-mode)
    (add-hook 'cider-mode-hook #'company-mode)
    :diminish subword-mode
    :config
    (setq nrepl-log-messages t                  
          cider-repl-display-in-current-window t
          cider-repl-use-clojure-font-lock t    
          cider-prompt-save-file-on-load 'always-save
          cider-font-lock-dynamically '(macro core function var)
          nrepl-hide-special-buffers t
          cider-show-error-buffer nil
          cider-overlays-use-font-lock t
          cider-repl-result-prefix ";; => ")
    (setq cider-cljs-lein-repl "(do (use 'figwheel-sidecar.repl-api) (start-figwheel!) (cljs-repl))")
    (cider-repl-toggle-pretty-printing))
#+end_src
*** clj-refactor
#+begin_src emacs-lisp :tangle yes
(use-package clj-refactor
  :defines cljr-add-keybindings-with-prefix
  :diminish clj-refactor-mode
  :config (cljr-add-keybindings-with-prefix "C-c C-j"))
#+end_src
** Markdown
#+begin_src emacs-lisp :tangle yes
(use-package markdown-mode
  :mode ("\\.md\\'" . markdown-mode)
  :config (progn
            (setq markdown-command "multimarkdown")
            (add-hook 'markdown-mode-hook #'trunc-lines-hook)))
#+end_src
*** Squiggly-clojure
#+begin_src emacs-lisp :tangle yes
  (use-package flycheck-clojure
    :config
    (flycheck-clojure-setup))
#+end_src
* Visual Enhancements
** Zooming
#+begin_src emacs-lisp :tangle yes
(defhydra hydra-zoom (global-map "<f2>")
  "zoom"
  ("i" text-scale-increase "in")
  ("o" text-scale-decrease "out"))
#+end_src
** beacon
Beacon makes sure you don't lose track of your cursor when jumping around a buffer.
#+begin_src emacs-lisp :tangle yes
  (use-package beacon
    :diminish beacon-mode
    :config
    (beacon-mode 1)
    (setq beacon-push-mark 10))
#+end_src
** show-paren
Always show matching parenthesis.
#+begin_src emacs-lisp :tangle yes
(show-paren-mode 1)
(setq show-paren-delay 0)
#+end_src
** golden-ratio
Give the working window more screen estate.
#+begin_src emacs-lisp :tangle yes
(use-package golden-ratio
  :diminish golden-ratio-mode
  :config (progn
            (add-to-list 'golden-ratio-extra-commands 'ace-window)
            (golden-ratio-mode 1)))
#+end_src
** volatile-highlights
Highlights recently copied/pasted text.
#+begin_src emacs-lisp :tangle yes
(use-package volatile-highlights
  :diminish volatile-highlights-mode
  :config (volatile-highlights-mode t))
#+end_src
** git-gutter
Displays added/modified/deleted on the left.
#+begin_src emacs-lisp :tangle yes
  (use-package git-gutter
    :init (global-git-gutter-mode)
    :diminish git-gutter-mode
    :defer 5
    :config
    (setq git-gutter:modified-sign "==")
    (setq git-gutter:added-sign "++")
    (setq git-gutter:deleted-sign "--")
    (setq git-gutter:update-interval 2)
    (global-set-key (kbd "C-c g")
                    (defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
                                                          :hint nil)
                      "
  Git gutter:
    _n_: next hunk        _s_tage hunk     _q_uit
    _p_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
    ^ ^                   _p_opup hunk
    _<_: first hunk
    _>_: last hunk        set start _R_evision
  "
                      ("n" git-gutter:next-hunk)
                      ("p" git-gutter:previous-hunk)
                      ("<" (progn (goto-char (point-min))
                                  (git-gutter:next-hunk 1)))
                      (">" (progn (goto-char (point-min))
                                  (git-gutter:previous-hunk 1)))
                      ("s" git-gutter:stage-hunk)
                      ("r" git-gutter:revert-hunk)
                      ("p" git-gutter:popup-hunk)
                      ("R" git-gutter:set-start-revision)
                      ("q" nil :color blue)
                      ("Q" (progn (git-gutter-mode -1)
                                  ;; git-gutter-fringe doesn't seem to
                                  ;; clear the markup right away
                                  (sit-for 0.1)
                                  (git-gutter:clear))
                       :color blue))))
#+end_src
* Org-mode
** Prerequisites
*** Htmlize
We need =htmlize= to add syntax highlighting to org-exports for HTML files.

#+begin_src emacs-lisp :tangle yes
  (use-package htmlize
    :config
    (require 'htmlize))
#+end_src
** Basic Configuration
#+begin_src emacs-lisp :tangle yes
  (use-package org
    :bind (("C-c c" . org-capture)
           ("C-c a" . org-agenda)
           ("C-c l" . org-store-link))
    :mode ("\\.org\\'" . org-mode)
    :init
    (add-hook 'org-mode-hook #'trunc-lines-hook)
    (setq org-ellipsis "⤵")
    (setq org-directory "~/.org")
    (setq org-default-notes-directory (concat org-directory "/notes.org"))
    (setq org-export-in-background t)
    (setq org-hide-emphasis-markers t)
    (setq org-src-tab-acts-natively t)
    (font-lock-add-keywords 'org-mode
                    '(("^ +\\([-*]\\) "
                       (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))) 
    (setq org-refile-targets
          '((nil :maxlevel . 3)
            (org-agenda-files :maxlevel . 3)))
    (setq org-use-fast-todo-selection t)
    (setq org-treat-S-cursor-todo-selection-as-state-change nil)
    (setq org-capture-templates
          '(("b" "Book" entry (file "~/.org/books.org")
             "* TO-READ %(org-set-tags)%? %i\n"))))
#+end_src
** org-agenda
#+begin_src emacs-lisp :tangle yes
  (defvar jethro/org-agenda-files
    (append
     ;;(file-expand-wildcards "~/.org/*.org")
     (file-expand-wildcards "~/.org/calendars/*.org")
     (file-expand-wildcards "~/.org/gtd/*.org"))
    "Files to include in org-agenda-files")

  (setq org-agenda-files jethro/org-agenda-files)

  (setq org-agenda-custom-commands 
        '(("w" todo "WAITING" nil) 
          ("n" todo "NEXT" nil)
          ("d" "Agenda + Next Actions" ((agenda) (todo "NEXT"))))
        )

  (setq org-agenda-dim-blocked-tasks t)

#+end_src
** org-icalendar
#+begin_src emacs-lisp :tangle yes
  (setq org-icalendar-combined-agenda-file (concat org-directory "/org.ics"))
  (setq org-icalendar-include-todo '(all))
  (setq org-icalendar-use-scheduled '(event-if-todo event-if-not-todo))
  (setq org-icalendar-use-deadline '(event-if-todo event-if-not-todo))
  (setq org-agenda-default-appointment-duration 60)

  ;; this hook saves an ics file once an org-buffer is saved
  (defun jethro/org-ical-export()
    (org-icalendar-combine-agenda-files))
#+end_src
** org-publish
#+begin_src emacs-lisp :tangle yes
  (setq org-publish-project-alist
        '(("books"
           ;; Path to your org files.
           :publishing-function org-html-publish-to-html
           :publishing-directory "~/Documents/Code/jethrokuan.github.io/"
           :base-directory "~/.org/"
           :exclude ".*"
           :include ["books.org"]
           :with-emphasize t
           :with-todo-keywords t
           :with-toc nil
           :html-head "<link rel=\"stylesheet\" href=\"/css/org.css\" type=\"text/css\">"
           :html-preamble t)
          ("emacs.d"
           :publishing-function org-html-publish-to-html
           :publishing-directory "~/Documents/Code/jethrokuan.github.io/"
           :base-directory "~/.emacs.d/"
           :exclude ".*"
           :include ["init.org"]
           :with-emphasize t
           :with-title nil         
           :with-toc t
           :html-head "<link rel=\"stylesheet\" href=\"/css/emacsd.css\" type=\"text/css\">"
           :html-preamble t)))
#+end_src
** org-reveal
#+begin_src emacs-lisp :tangle yes
  (use-package ox-reveal
    :config
    (require 'ox-reveal))
#+end_src
** org-latex
I use export to LaTeX through ox-latex, using xelatex for a nicer export template.
#+begin_src emacs-lisp :tangle yes
  (setq org-latex-pdf-process
        '("xelatex -shell-escape -interaction nonstopmode %f"
          "xelatex -shell-escape -interaction nonstopmode %f"))
  (require 'ox-latex)
  (setq org-latex-tables-booktabs t)
  (setq org-latex-listings 'minted)
  (setq org-latex-minted-options
        '(("frame" "lines")
          ("linenos")
          ("numbersep" "5pt")
          ("framesep" "2mm")
          ("fontfamily" "tt")))
  (add-to-list 'org-latex-classes
               '("org-article"
                 "\\documentclass[11pt,a4paper]{article}
                        \\usepackage[default]{droidserif}
                        \\usepackage[T1]{fontenc}
                        \\usepackage{booktabs}
                        \\usepackage{minted}
                        \\usemintedstyle{borland}
                        \\usepackage{color}
                        \\setcounter{tocdepth}{2}
                        \\usepackage{xcolor}
                        \\usepackage{soul}
                        \\definecolor{Light}{gray}{.90}
                        \\sethlcolor{Light}
                        \\let\\OldTexttt\\texttt
                        \\renewcommand{\\texttt}[1]{\\OldTexttt{\\hl{#1}}}
                        \\usepackage{epigraph}
                        \\usepackage{enumitem}
                        \\setlist{nosep}
                        \\setlength\\epigraphwidth{13cm}
                        \\setlength\\epigraphrule{0pt}
                        \\usepackage{fontspec}
                        \\usepackage{graphicx} 
                        \\usepackage{parskip}
                        \\let\\oldsection\\section
                        \\renewcommand\\section{\\clearpage\\oldsection}
                        \\setlength{\\parskip}{1em}
                        \\usepackage{geometry}
                        \\usepackage{hyperref}
                        \\hypersetup {colorlinks = true, allcolors = red}
                        \\geometry{a4paper, textwidth=6.5in, textheight=10in,
                                    marginparsep=7pt, marginparwidth=.6in}
                        \\pagestyle{empty}
                        \\title{}                  
                        [NO-DEFAULT-PACKAGES]
                        [NO-PACKAGES]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
               '("org-math"
                 "\\documentclass[11pt,a4paper]{article}
                        \\usepackage[T1]{fontenc}
                        \\usepackage{amsmath}
                        \\usepackage{booktabs}
                        \\usepackage{color}
                        \\setcounter{tocdepth}{2}
                        \\usepackage{epigraph}
                        \\usepackage{enumitem}
                        \\setlist{nosep}
                        \\setlength\\epigraphwidth{13cm}
                        \\setlength\\epigraphrule{0pt}
                        \\usepackage{fontspec}
                        \\usepackage{graphicx} 
                        \\usepackage{parskip}
                        \\let\\oldsection\\section
                        \\renewcommand\\section{\\clearpage\\oldsection}
                        \\setlength{\\parskip}{1em}
                        \\usepackage{geometry}
                        \\usepackage{hyperref}
                        \\hypersetup {colorlinks = true, allcolors = red}
                        \\geometry{a4paper, textwidth=6.5in, textheight=10in,
                                    marginparsep=7pt, marginparwidth=.6in}
                        \\pagestyle{empty}
                        \\title{}                  
                        [NO-DEFAULT-PACKAGES]
                        [NO-PACKAGES]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src
** jethro/org-sort-books
I like to keep my books in sorted order, alphanumerically, and then by TODO keyword.
#+begin_src emacs-lisp :tangle yes
(defun jethro/org-sort-books ()
    (interactive)
    (let ((old-point (point)))
      (beginning-of-buffer)
      (org-sort-entries t ?a)
      (beginning-of-buffer)
      (org-sort-entries t ?o)
      (show-all)
      (org-global-cycle)
      (goto-char old-point)))
#+end_src
** jethro/org-after-save-init
#+begin_src emacs-lisp :tangle yes
  (defun jethro/org-after-save-init ()
    (org-babel-tangle)
    (org-publish "emacs.d"))
#+end_src
** gtd-mode
#+begin_src emacs-lisp :tangle yes
  (use-package gtd-mode
    :bind (("C-c x" . gtd-clear-inbox)
           ("C-c i". gtd-into-inbox))
    :ensure f
    :load-path "elisp/"
    :config
    (gtd-mode 1))
#+end_src
* Project Management
** Smerge-mode
Useful when handling git merge conflicts.
#+begin_src emacs-lisp :tangle yes
  (use-package smerge-mode
    :functions smerge-next smerge-prev smerge-keep-all smerge-keep-mine smerge-keep-other
    :config
    (progn
      (global-set-key (kbd "C-c s")
                      (defhydra hydra-smerge (:body-pre (smerge-mode 1) :color red)
                        "Smerge mode"
                        ("<down>" smerge-next        "Next conflict")
                        ("<up>"   smerge-prev        "Previous conflict")
                        ("M-a"    smerge-keep-all    "Keep all")
                        ("M-m"    smerge-keep-mine   "Keep mine")
                        ("M-o"    smerge-keep-other  "Keep other")))))
#+end_src
** Magit
#+begin_src emacs-lisp :tangle yes
(use-package magit  
  :bind (("s-g" . magit-status)
         ("s-G" . magit-blame))
  :init (setq magit-auto-revert-mode nil)
  :config (add-hook 'magit-mode-hook 'hl-line-mode))
#+end_src
** Projectile
#+begin_src emacs-lisp :tangle yes
  (use-package projectile
    :demand t
    :init (projectile-global-mode 1)
    :bind-keymap* ("C-x p" . projectile-command-map)
    :config
    (require 'projectile)
    (use-package counsel-projectile 
      :bind (("s-P" . counsel-projectile)
             ("s-f" . counsel-projectile-find-file)
             ("s-b" . counsel-projectile-switch-to-buffer)))
    (setq projectile-use-git-grep t)
    (setq projectile-switch-project-action
          #'projectile-commander)
    (setq projectile-create-missing-test-files t)
    (setq projectile-completion-system 'ivy)
    (def-projectile-commander-method ?s
      "Open a *eshell* buffer for the project."
      (projectile-run-eshell))
    (def-projectile-commander-method ?c
      "Run `compile' in the project."
      (projectile-compile-project nil))
    (def-projectile-commander-method ?\C-?
      "Go back to project selection."
      (projectile-switch-project))
    (def-projectile-commander-method ?d
      "Open project root in dired."
      (projectile-dired))
    (def-projectile-commander-method ?F
      "Git fetch."
      (magit-status)
      (call-interactively #'magit-fetch-current))
    (def-projectile-commander-method ?j
      "Jack-in."
      (let* ((opts (projectile-current-project-files))
             (file (ido-completing-read
                    "Find file: "
                    opts
                    nil nil nil nil
                    (car (cl-member-if
                          (lambda (f)
                            (string-match "core\\.clj\\'" f))
                          opts)))))
        (find-file (expand-file-name
                    file (projectile-project-root)))
        (run-hooks 'projectile-find-file-hook)
        (cider-jack-in))))
#+end_src
* Profiling
** esup
#+begin_src emacs-lisp :tangle yes
(use-package esup
  :defer t)
#+end_src
** keyfreq
#+begin_src emacs-lisp :tangle yes
(use-package keyfreq
  :config
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1))
#+end_src
* Miscellaneous
** Pivotal-mode
#+begin_src emacs-lisp :tangle yes
  (use-package pivotal-tracker
    :config
    (setq pivotal-api-token jethro/pivotal-api-token))
#+end_src
** which-key
#+begin_src emacs-lisp :tangle yes
(use-package which-key
  :diminish which-key-mode
  :config (add-hook 'after-init-hook 'which-key-mode))
#+end_src
** nameless
#+begin_src emacs-lisp :tangle yes
(use-package nameless
  :diminish nameless-mode
  :config
  (add-hook 'emacs-lisp-mode-hook 'nameless-mode-from-hook)
  (setq nameless-global-aliases
        '(("fl" . "font-lock")
          ("s" . "seq")
          ("me" . "macroexp")
          ("c" . "cider")
          ("q" . "queue"))))
#+end_src
** firestarter
#+begin_src emacs-lisp :tangle yes
(use-package firestarter
  :bind ("C-c m s" . firestarter-mode)
  :init (put 'firestarter 'safe-local-variable 'identity))
#+end_src
** Paradox
Use Paradox instead of the default =package-list-packages=. =jethro/paradox-user-token= is defined in =secrets.el=, and contains a github API token which has =public_repo= permissions.
#+begin_src emacs-lisp :tangle yes
(use-package paradox
  :commands (paradox-list-packages)
  :config
  (setq paradox-github-token jethro/paradox-user-token))
#+end_src
** focus
#+begin_src emacs-lisp :tangle yes
(use-package focus
  :diminish focus-mode
  :bind ("C-c m f" . focus-mode))
#+end_src
** artbollocks
Prevent usage of passive voice, weasel words and other common grammatical mistakes.
#+begin_src emacs-lisp :tangle yes
(use-package artbollocks-mode
  :bind (("C-c m a" . artbollocks-mode))
  :config
  (add-hook 'text-mode-hook 'artbollocks-mode))
#+end_src
** darkroom
#+begin_src emacs-lisp :tangle yes
(use-package darkroom
  :bind (("C-c m d" . darkroom-mode)
         ("C-c m t" . darkroom-tentative-mode)))
#+end_src
** bury-successful-compilation
Closes compile buffer if there are no errors.
#+begin_src emacs-lisp :tangle yes
(use-package bury-successful-compilation
  :config
  (bury-successful-compilation 1))
#+end_src
