#+TITLE: Org Mode for GTD
#+AUTHOR: Jethro Kuan
#+STARTUP: showall

* Org Mode for GTD
This document aims to extensively document my implementation of
Getting Things Done, a methodology by David Allen. This will always be
a work-in-progress, and is *fully representative* of the GTD setup I
am currently using.

This document is written primarily for my own reference.
However, it is also written with readers who are looking for
inspiration when implementing GTD in org-mode.

** Reasoning 
There is no shortage of existing GTD implementations, in org-mode.
Perhaps the best reference document out there is by Bernt Hansen,
published [[http://doc.norang.ca/org-mode.html][here]]. However, there are some slight deviations from the GTD
that David Allen proposes, and some conveniences he takes making the
GTD system he implements weaker, that can perhaps be solved by writing
some Elisp. This is a major adaptation of his setup, but with
additional customizations that make it closer to the ideal system that
David Allen speaks about.

** Org-mode Setup
We use =org-plus-contrib=, which contains several contrib plugins that
may come in handy later, including =org-drill= and some =org-babel=
language support.

To install =org-plus-contrib=, one has to add the package archive to
Emacs. This is typically where you also add MELPA.

#+BEGIN_SRC emacs-lisp :tangle no
(when (>= emacs-major-version 24)
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (package-initialize))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-plus-contrib
     :bind (("C-c l" . org-store-link)
            ("C-c a" . org-agenda)
            ("C-c b" . org-iswitchb)
            ("C-c c" . org-capture))
     :config
     (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode)))
#+END_SRC

** Organizing Your Life Into Org-mode Files
Bernt Hansen uses separate files as logical groups, such as a
separation between work and life. This may suit your purpose, but this
makes it a lot harder to write general Elisp code for. Once a new
logical group appears, the code that generates the weekly review would
have to change as well, for example.

Instead, I use David Allen's physical categories as different files,
and use org-mode tags to separate the different context. That is, I
have the files:

| file (.org) | Purpose                                                                                                                   |
|-------------+---------------------------------------------------------------------------------------------------------------------------|
| inbox       | Includes everything on your mind: tasks, ideas etc.                                                                       |
| someday     | Includes things that will be done later on (with no specific deadline), to be reviewed often                              |
| reference   | I don't actually have this file; I use [[http://jblevins.org/projects/deft/%5Ddeft-mode][deft-mode]] as my braindump                                                          |
| waiting     | This contains a list of names of people as level one headings, and things I'm waiting for them to complete as subheadings |
| next        | This contains one-off tasks that don't belong to projects.                                                                |
| projects    | This contains the list of projects, and their corresponding todo items                                                    |

** Stage 1: Collecting
Collecting needs to be as convenient as possible. This is achieved
easily be using =org-capture=. The capture template is kept as simple
as possible, to reduce friction in adding captures. Things like
context can be decided later on in the processing stage.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-capture-templates
        `(("i" "inbox" entry (file "~/.org/gtd/inbox.org")
           "* TODO %?
  Captured %<%Y-%m-%d %H:%M>")
          ("w" "Web site" entry (file "~/.org/deft/websites.org")
           "* %c\n" :immediate-finish t)))
#+END_SRC

** Stage 2: Processing
Processing involves sorting the items in =inbox= into their respective
folders. This process is conducted within =org-agenda=, within a view
that will display all items in inbox. At the end of the "processing"
stage, =inbox.org= should be completely blank.

There are a few key things during the processing step:

1. Which file: Is this to be done someday when there's time, or is
   this a project (old or new), or is this a simple action?
2. Adding of context: Is this school-related, or work-related? Do I
   have to be at a specific location to perform this task?

At the end of the process, the item in =inbox= would have either gone
into a non-actionable file, or have been filed under an actionable
file (=projects=, or =next=) with a physical actionable item. To
encourage this, we have a list of verbs.

** Stage 3: Organizing

** Stage 4: Reviewing

** Stage 5: Doing
